<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analysis Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart-container {
            width: 600px;
            margin: 20px auto;
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <h1>Room Booking Service Analysis</h1>

    <div id="data" 
         data-totalBookings="<%= totalBookings %>"
         data-confirmed="<%= confirmedBookings %>" 
         data-pending="<%= pendingBookings %>" 
         data-cancelled="<%= cancelledBookings %>" 
         data-active="<%= activeBookings %>" 
         data-single="<%= singleRoomProperties %>" 
         data-double="<%= doubleRoomProperties %>" 
         data-male="<%= maleProperties %>" 
         data-female="<%= femaleProperties %>"
         data-ga-sessions="<%= googleAnalyticsData.totals[0].values[0] %>" 
         data-ga-pageviews="<%= googleAnalyticsData.totals[0].values[1] %>"
         data-bookings-over-time='<%= JSON.stringify(bookingsOverTime) %>'>
    </div>

    <div class="chart-container">
        <canvas id="bookingStatusChart"></canvas>
    </div>

    <div class="chart-container">
        <canvas id="propertyTypeChart" width="600" height="400"></canvas>
    </div>

    <div class="chart-container">
        <canvas id="userGenderChart"></canvas>
    </div>

    <div class="chart-container">
        <canvas id="googleAnalyticsChart"></canvas>
    </div>

    <div class="chart-container">
        <canvas id="bookingsOverTimeChart"></canvas>
    </div>

    <script>
        const dataElement = document.getElementById('data');

        const confirmedBookings = parseInt(dataElement.getAttribute('data-confirmed'));
        const pendingBookings = parseInt(dataElement.getAttribute('data-pending'));
        const cancelledBookings = parseInt(dataElement.getAttribute('data-cancelled'));
        const activeBookings = parseInt(dataElement.getAttribute('data-active'));

        const singleRoomProperties = parseInt(dataElement.getAttribute('data-single'));
        const doubleRoomProperties = parseInt(dataElement.getAttribute('data-double'));

        const maleProperties = parseInt(dataElement.getAttribute('data-male'));
        const femaleProperties = parseInt(dataElement.getAttribute('data-female'));

        const googleAnalyticsSessions = parseInt(dataElement.getAttribute('data-ga-sessions'));
        const googleAnalyticsPageviews = parseInt(dataElement.getAttribute('data-ga-pageviews'));

        // Parsing bookings over time data
        const bookingsOverTime = JSON.parse(dataElement.getAttribute('data-bookings-over-time'));

        const bookingStatusData = {
            labels: ['Confirmed', 'Pending', 'Cancelled', 'Active'],
            datasets: [{
                label: 'Booking Status',
                data: [confirmedBookings, pendingBookings, cancelledBookings, activeBookings],
                backgroundColor: ['#4caf50', '#ffeb3b', '#f44336', '#2196f3'],
                borderWidth: 1
            }]
        };

        const propertyTypeData = {
            labels: ['Single Room', 'Double Room'],
            datasets: [{
                label: 'Property Type',
                data: [singleRoomProperties, doubleRoomProperties],
                backgroundColor: ['#9c27b0', '#3f51b5'],
                borderWidth: 1
            }]
        };

        const userGenderData = {
            labels: ['Male Properties', 'Female Properties'],
            datasets: [{
                label: 'Property by Gender',
                data: [maleProperties, femaleProperties],
                backgroundColor: ['#ff9800', '#e91e63'],
                borderWidth: 1
            }]
        };

        const googleAnalyticsData = {
            labels: ['Sessions', 'Pageviews'],
            datasets: [{
                label: 'Google Analytics Data',
                data: [googleAnalyticsSessions, googleAnalyticsPageviews],
                backgroundColor: ['#ff5722', '#00bcd4'],
                borderWidth: 1
            }]
        };

        // Creating the booking status chart
        const bookingStatusChart = new Chart(document.getElementById('bookingStatusChart'), {
            type: 'bar',
            data: bookingStatusData,
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Creating the property type chart
        const propertyTypeChart = new Chart(document.getElementById('propertyTypeChart'), {
            type: 'pie',
            data: propertyTypeData,
            options: {
                responsive: true
            }
        });

        // Creating the user gender chart
        const userGenderChart = new Chart(document.getElementById('userGenderChart'), {
            type: 'doughnut',
            data: userGenderData,
            options: {
                responsive: true
            }
        });

        // Creating the Google Analytics chart
        const googleAnalyticsChart = new Chart(document.getElementById('googleAnalyticsChart'), {
            type: 'bar',
            data: googleAnalyticsData,
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Creating bookings over time chart
        const bookingsOverTimeChart = new Chart(document.getElementById('bookingsOverTimeChart'), {
            type: 'line',
            data: {
                labels: bookingsOverTime.map(b => b._id),
                datasets: [{
                    label: 'Bookings Over Time',
                    data: bookingsOverTime.map(b => b.count),
                    fill: false,
                    borderColor: '#3e95cd',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
</body>
</html>
